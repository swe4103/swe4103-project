openapi: 3.0.3
info:
  title: SWE4103 - TimeFlow
  description: 'This is the API specification for the SWE4103 - TimeFlow project.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: mcollet1@unb.ca
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
tags:
  - name: auth
    description: Authentication related operations
  - name: users
    description: User related operations
  - name: classes
    description: Class related operations
  - name: projects
    description: Project related operations
  - name: teams
    description: Teams related operations
  - name: joy
    description: Team Joy related operations
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Log user into the system
      description: Log a user into the system.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '403':
          description: Invalid username/password supplied
        '400':
          description: Bad request
  /auth/logout:
    post:
      tags:
        - auth
      security:
        - authorization: []
      summary: Log out user
      description: Log out current logged in user.
      operationId: logoutUser
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user via invitation
      description: Registers a new user based on the invitation token.
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
            example: 'invite-token-example'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  example: 'John Doe'
                password:
                  type: string
                  format: password
                  example: 'securepassword123'
      responses:
        '201':
          description: User registered successfully
        '403':
          description: Invalid or expired invitation token
        '400':
          description: Bad request

  /api/auth/validate-token:
    get:
      summary: Validate a token
      tags:
        - auth
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
            description: JWT token sent via email or used for authentication
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [auth, invite]
            description: Type of the token being validated
      responses:
        '200':
          description: Token validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenValidationResponse'
        '400':
          description: Bad request, missing or malformed token or tokenType
  /projects:
    post:
      tags:
        - projects
      summary: Create a new project
      description: Allows instructors or admins to create a new project (course).
      security:
        - authorization: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectName:
                  type: string
                  example: 'Math 101'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '403':
          description: Unauthorized - only instructors or admins can create projects
    get:
      tags:
        - projects
      summary: Get all projects for the current user
      description: Fetches all projects the current user is involved in.
      security:
        - authorization: []
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
  /projects/{id}:
    get:
      tags:
        - projects
      summary: Get project by ID
      description: Retrieves details of a project by its project ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 'project-abc123'
      security:
        - authorization: []
      responses:
        '200':
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
    put:
      tags:
        - projects
      summary: Update a project
      description: Updates the details of a specific project.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 'project-abc123'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      security:
        - authorization: []
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
    delete:
      tags:
        - projects
      summary: Delete a project
      description: Deletes a specific project from the system.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 'project-abc123'
      security:
        - authorization: []
      responses:
        '204':
          description: Project deleted successfully
        '404':
          description: Project not found
  /users/invite:
    post:
      tags:
        - users
      summary: Send invites (either student or instructor)
      description: Admins can invite instructors and students. Instructors can only invite students to their projects.
      security:
        - authorization: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emails:
                  type: array
                  items:
                    type: string
                    example: 'invitee@example.com'
                role:
                  type: string
                  enum:
                    - STUDENT
                    - INSTRUCTOR
                  example: 'STUDENT'
                teamId:
                  type: string
                  nullable: true
                  example: 'team-abc123'
      responses:
        '200':
          description: Invitations sent successfully
        '400':
          description: Bad request (missing required fields or incorrect type)
        '403':
          description: Unauthorized access (e.g., an instructor trying to invite another instructor)
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieves the details of a specific user by their user ID.
      security:
        - authorization: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Update user details
      description: Updates the details of a specific user.
      security:
        - authorization: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      tags:
        - users
      summary: Delete user by ID
      description: Deletes a user from the system by their user ID.
      security:
        - authorization: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
  /teams:
    post:
      summary: Create a new team
      tags:
        - teams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Bad request

    get:
      summary: Get all teams for the current user
      tags:
        - teams
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '500':
          description: Internal server error

  /teams/{id}:
    get:
      summary: Get a team by ID
      tags:
        - teams
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The GUID of the team
      responses:
        '200':
          description: Team found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          description: Team not found

    put:
      summary: Update a team by ID
      tags:
        - teams
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The GUID of the team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '200':
          description: Team updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Bad request
        '404':
          description: Team not found

    delete:
      summary: Delete a team by ID
      tags:
        - teams
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The GUID of the team
      responses:
        '204':
          description: Team deleted successfully
        '404':
          description: Team not found
  /classes:
    post:
      summary: Create a new class
      tags:
        - classes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '201':
          description: Class created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '400':
          description: Bad request

    get:
      summary: Get all classes for the current user
      tags:
        - classes
      responses:
        '200':
          description: A list of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        '500':
          description: Internal server error

  /classes/{id}:
    get:
      summary: Get a class by ID
      tags:
        - classes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The GUID of the class
      responses:
        '200':
          description: Class found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '404':
          description: Class not found

    put:
      summary: Update a class by ID
      tags:
        - classes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The GUID of the class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '200':
          description: Class updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '400':
          description: Bad request
        '404':
          description: Class not found

    delete:
      summary: Delete a class by ID
      tags:
        - classes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The GUID of the class
      responses:
        '204':
          description: Class deleted successfully
        '404':
          description: Class not found
  /joy:
    post:
      summary: Create a new joy rating
      tags:
        - joy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoyRating'
      responses:
        '201':
          description: Joy rating created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoyRating'
        '400':
          description: Bad request

    get:
      summary: Get all joy ratings with optional filters
      tags:
        - joy
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
            description: The ID of the user whose joy ratings to retrieve
        - in: query
          name: teamId
          required: true
          schema:
            type: string
            description: (Optional) Filter joy ratings by a specific team
        - in: query
          name: fromDate
          schema:
            type: string
            format: date-time
            description: (Optional) Retrieve ratings from this date onward
        - in: query
          name: toDate
          schema:
            type: string
            format: date-time
            description: (Optional) Retrieve ratings up to this date
      responses:
        '200':
          description: A list of joy ratings matching the filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JoyRating'
        '400':
          description: Bad request - Invalid query parameters
        '500':
          description: Internal server error

  /joy/{id}:
    get:
      summary: Get a joy rating by ID
      tags:
        - joy
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the joy rating
      responses:
        '200':
          description: Joy rating found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoyRating'
        '404':
          description: Joy rating not found

    put:
      summary: Update a joy rating by ID
      tags:
        - joy
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the joy rating
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoyRating'
      responses:
        '200':
          description: Joy rating updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoyRating'
        '400':
          description: Bad request
        '404':
          description: Joy rating not found

    delete:
      summary: Delete a joy rating by ID
      tags:
        - joy
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the joy rating
      responses:
        '204':
          description: Joy rating deleted successfully
        '404':
          description: Joy rating not found
components:
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          example: john@email.com
        password:
          type: string
          description: Hash (String)
        displayName:
          type: string
          example: John Doe
        role:
          type: string
          enum:
            - STUDENT
            - INSTRUCTOR
            - ADMIN
        groups:
          type: array
          items:
            type: string
            description: 'For an INSTRUCTOR - List of classes they teach. For a STUDENT - List of teams they are on'
    Class:
      type: object
      properties:
        id:
          type: string
          description: GUID (String)
        name:
          type: string
    Team:
      type: object
      properties:
        id:
          type: string
          description: GUID (String)
        name:
          type: string
        projectId:
          type: string
          description: GUID (String)
    Project:
      type: object
      properties:
        id:
          type: string
          description: GUID (String)
        name:
          type: string
        classId:
          type: string
          description: GUID (String)
    JoyRating:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          description: GUID (String)
        teamId:
          type: string
          description: GUID (String)
        date:
          type: string
          format: date-time
        rating:
          type: integer
          description: Int from 0-5
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: 'jwt-token-example'
        user:
          $ref: '#/components/schemas/User'
    TokenValidationResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the token is valid or not
        decoded:
          type: object
          nullable: true
          description: Decoded token data (if valid)
        error:
          type: string
          nullable: true
          description: Error message (if the token is invalid or expired)
